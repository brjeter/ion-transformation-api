# /**
#  * Copyright (c) Connexta
#  *
#  * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU
#  * Lesser General Public License as published by the Free Software Foundation, either version 3 of
#  * the License, or any later version.
#  *
#  * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
#  * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public
#  * License is distributed along with this program and can be found at
#  * <http://www.gnu.org/licenses/lgpl.html>.
#  */
openapi: 3.0.2

info:
  version: ${project.version}
  title: Transformation API Specification
  description: >
    The Transformation API allows resources to be transformed into discovery metadata and other supporting products.
  contact:
    name: Connexta
  license:
    name: GNU Lesser General Public License
    url: 'http://www.gnu.org/licenses/lgpl.html'

servers:
  - url: ${rest.server.url}

paths:
  /transform:
    parameters:
      - $ref: '#/components/parameters/AcceptVersion'
    post:
      summary: Submit transformation request
      description: A request to transform resources into discovery metadata and other supporting products.
      operationId: transform
      tags:
        - transform
      requestBody:
        $ref: '#/components/requestBodies/TransformRequest'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        default:
          $ref: '#/components/responses/DefaultError'
  /transform/{TransformId}:
    parameters:
      - $ref: '#/components/parameters/TransformId'
    get:
      summary: Poll transformation request status
      description: >
        After posting a transformation request, the client can use the returned URI to poll for the transform's completion at this endpoint.
      operationId: poll
      tags:
        - transform
      responses:
        '200':
          description: Information on each of the metadata types that came out of the transformation.
          headers:
            Content-Version:
              $ref: '#/components/headers/ContentVersion'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransformationPollResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '501':
          $ref: '#/components/responses/NotImplemented'
        'default':
          $ref: '#/components/responses/DefaultError'
    delete:
      summary: Delete the transformation request
      description: >
        After retrieving the output of the transformation, the client should call this endpoint to remove the request.
      operationId: delete
      tags:
        - transform
      responses:
        '204':
          description: The transformation request was successfully deleted.
          headers:
            Content-Version:
              $ref: '#/components/headers/ContentVersion'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '501':
          $ref: '#/components/responses/NotImplemented'
        'default':
          $ref: '#/components/responses/DefaultError'
  /transform/{TransformId}/{MetadataType}:
    parameters:
      - $ref: '#/components/parameters/TransformId'
      - name: MetadataType
        in: path
        description: The metadata format ID.
        required: true
        schema:
          $ref: '#/components/schemas/MetadataType'
    get:
      summary: Retrieve metadata.
      description: Used to retrieve the metadata for a transform request.
      operationId: retrieve
      tags:
        - transform
      responses:
        '200':
          $ref: '#/components/responses/MetadataContentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '501':
          $ref: '#/components/responses/NotImplemented'
        'default':
          $ref: '#/components/responses/DefaultError'
components:
  requestBodies:
    TransformRequest:
      description: A request to transform a file into discovery metadata and other supporting products.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransformRequest'
  responses:
    Created:
      description: >
        The transformation request was accepted for processing. The URI for polling the status is
        returned in the Location header of the response.
      headers:
        Content-Version:
          $ref: '#/components/headers/ContentVersion'
        Location:
          $ref: '#/components/headers/Location'
    MetadataContentResponse:
      description: Successfully retrieved.
      headers:
        Content-Version:
          $ref: '#/components/headers/ContentVersion'
        Content-Type:
          required: true
          schema:
            description: The content type of the response body contents
            type: string
        Content-Length:
          required: true
          schema:
            description: The length, in bytes, of the response body contents.
            type: integer
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary
            description: The metadata contents.
    BadRequest:
      description: The client message could not be understood by the server due to invalid format or syntax.
      headers:
        Content-Version:
          $ref: '#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: The client could not be authenticated.
      headers:
        Content-Version:
          $ref: '#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: The client is not authorized.
      headers:
        Content-Version:
          $ref: '#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: The transform request could not be found.
      headers:
        Content-Version:
          $ref: '#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerError:
      description: The server encountered an unexpected condition that prevented it from fulfilling the request.
      headers:
        Content-Version:
          $ref: '#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotImplemented:
      description: >
        The requested API version is not supported and therefore not implemented.
        Possible codes reported are:

        - 501001 - Unable to parse *Accept-Version*

        - 501002 - The provided major version is no longer supported

        - 501003 - The provided major version is not yet supported by the server

        - 501004 - The provided minor version is not yet supported by the server
      headers:
        Content-Version:
          $ref: '#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    DefaultError:
      description: Any other possible errors not currently known.
      headers:
        Content-Version:
          $ref: '#/components/headers/ContentVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  parameters:
    AcceptVersion:
      in: header
      name: Accept-Version
      description: >
        The API version used by the client to produce the REST message. The client must accept
        responses marked with any minor versions after this one. This implies that all future minor
        versions of the message are backward compatible with all previous minor versions of the same
        message.
      required: true
      schema:
        $ref: '#/components/schemas/Version'
      examples:
        major.minor:
          value: '1.2'
          summary: A released minor version
        major.minor.patch:
          value: '1.0.3'
          summary: A patched version
        dev:
          value: '1.2.0-SNAPSHOT'
          summary: A development version
    TransformId:
      name: TransformId
      in: path
      description: >
        The ID of the transform request.
      required: true
      schema:
        type: string
  headers:
    ContentVersion:
      description: >
        The API version used by the server to produce the REST message. The server will accept
        messages for any minor versions prior to this one.
      required: true
      schema:
        $ref: '#/components/schemas/Version'
      examples:
        major.minor:
          value: '1.2'
          summary: A released minor version
        major.minor.patch:
          value: '1.0.3'
          summary: A patched version
        dev:
          value: '1.2.0-SNAPSHOT'
          summary: A development version
    Location:
      description: >
        The URI that can be used to retrieve the status of the transformation request.
      required: true
      schema:
        type: string
        format: uri
  schemas:
    Version:
      description: Version number.
      type: string
      minLength: 3
      maxLength: 80
      pattern: '^([1-9]([0-9]+)?)\.(0|([1-9]([0-9]+)?))(\.(0|([1-9]([0-9]+)?))(-.*)?)?$'
      example: 1.2, 2.4.3, 0.2.5-SNAPSHOT
    TransformationPollResponse:
      type: object
      required:
        - transformationStatus
        - metadataInformations
      properties:
        transformationStatus:
          description: This is an aggregated status.
          $ref: '#/components/schemas/Status'
        errorMessage:
          description: An optional error message in the case the transformation failed.
          $ref: '#/components/schemas/ErrorMessage'
        metadataInformations:
          description: >
            An array of the information for each metadata type that will be provided from the
            transformation request. NOTE this could be empty.
          type: array
          minItems: 0
          uniqueItems: true
          items:
            $ref: '#/components/schemas/MetadataInformation'
    MetadataInformation:
      type: object
      required:
        - metadataType
        - transformationStatus
      properties:
        metadataType:
          $ref: '#/components/schemas/MetadataType'
        transformationStatus:
          $ref: '#/components/schemas/Status'
        errorMessage:
          description: An optional error message in the case the transformation failed.
          $ref: '#/components/schemas/ErrorMessage'
        location:
          description: The URI for where the metadata is located. NOTE this will not be populated until the transformationStatus is Complete.
          type: string
          format: uri
          example: 'https://www.example.com/mis/30f14c6c1fc85cba12bfd093aa8f90e3'
        transformedTimestamp:
          type: string
          format: date-time
          description: The server time when the metadata was generated. NOTE this will not be populated until the transformationStatus is Complete.
          example: 2019-05-09T14:47:13.101+0000
    MetadataType:
      description: The type of metadata.
      type: string
      enum: [irm]
    Status:
      description: The status of the operation.
      type: string
      enum: [In Progress, Done, Failed]
    TransformRequest:
      type: object
      required:
        - currentLocation
        - metacardLocation
        - finalLocation
      properties:
        currentLocation:
          description: >
            This URI must support HTTP GET to retrieve the file. This MUST be available until the
            transformation request is "Done".
          type: string
          format: uri
          example: https://www.example.com/mis/30f14c6c1fc85cba12bfd093aa8f90e3
        finalLocation:
          description: >
            This URI will not actually be called by the Transform service. It will only be used by
            the Transform service to put in the transformed metadata for the
            "resource download location".
          type: string
          format: uri
          example: https://www.example.com/mis/30f14c6c1fc85cba12bfd093aa8f90e3
        metacardLocation:
          description: >
            This URI must support HTTP GET to retrieve the metacard xml.
          type: string
          format: uri
          example: https://www.example.com/mis/30f14c6c1fc85cba12bfd093aa8f90e3
    ErrorResponse:
      description: Error response.
      type: object
      required:
        - timestamp
        - path
        - status
        - error
        - message
      properties:
        timestamp:
          type: string
          format: date-time
          description: The server time when the error was generated.
          example: 2019-05-09T14:47:13.101+0000
        path:
          type: string
          description: The path for the REST endpoint that generated this error.
          example: /transform
        status:
          type: integer
          format: int32
          description: The corresponding HTTP status code.
          minimum: 100
          maximum: 599
          example: 400
        code:
          type: integer
          format: int32
          description: >
            An optional and more specific code corresponding to the error (specific codes need to be
            documented as part of the API operation). This code allows a given category of errors
            (e.g. 501: Not Implemented) to be more specific as to why.
        error:
          type: string
          description: The corresponding HTTP reason phrase.
          example: Bad Request
          minLength: 1
        errorMessage:
          $ref: '#/components/schemas/ErrorMessage'
    ErrorMessage:
      type: object
      description: Error message.
      required:
        - message
      properties:
        message:
          type: string
          description: Specific information about the error.
          minLength: 1
          example: Validation failed for object='systemInfo'.
        details:
          type: array
          items:
            type: string
          description: Optional detailed information about the error.